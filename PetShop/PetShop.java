package aps3;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

// Classe principal do sistema de pet shop, respons√°vel pela gest√£o de clientes, agendamentos, produtos e financeiro.
public class PetShop { 

    // Scanner usado para entrada de dados do usu√°rio. 
    // Definido como constante para evitar m√∫ltiplas inst√¢ncias ao longo da execu√ß√£o.
    private static final Scanner SC = new Scanner(System.in);

    // Listas para armazenar clientes, agendamentos e produtos cadastrados no sistema.
    private static final List<Cliente> CLIENTES = new ArrayList<>();
    private static final List<Agendamento> AGENDAMENTOS = new ArrayList<>();
    private static final List<Produto> PRODUTOS = new ArrayList<>();

    // Objeto respons√°vel pela gest√£o financeira, inicializado com valores padr√£o.
    private static final Financeiro financeiro = new Financeiro(0, 0, "Indefinido", LocalDate.now());

    // Lista imut√°vel contendo os servi√ßos oferecidos pelo pet shop.
    private static final List<String> SERVI√áOS_VALIDOS = List.of(
        "Banho", "Tosa Tesoura", "Tosa M√°quina", "Tosa Beb√™",
        "Tosa Higi√™nica", "Corte de Unha", "Limpeza de Ouvido",
        "Hidrata√ß√£o", "Remo√ß√£o de Subpelos"
    );

    // M√©todo principal do sistema, respons√°vel pelo fluxo de intera√ß√£o com o usu√°rio.
    public static void main(String[] args) {
        // Utiliza√ß√£o do try-with-resources para garantir que o Scanner seja fechado corretamente ao final da execu√ß√£o.
        try (SC) {
            int opcao;
            do {
                exibirMenu(); // Exibe o menu principal ao usu√°rio.
                opcao = lerOpcao(); // M√©todo para capturar a op√ß√£o escolhida.

                // Estrutura de decis√£o baseada na op√ß√£o do usu√°rio.
                switch (opcao) {
                    case 1 -> cadastrarPet(); // M√©todo para cadastrar um novo pet.
                    case 2 -> listarPets(); // M√©todo para listar todos os pets cadastrados.
                    case 3 -> realizarAgendamento(); // M√©todo para criar um novo agendamento.
                    case 4 -> exibirHistoricoAgendamentos(); // M√©todo para visualizar agendamentos passados.
                    case 5 -> exibirOutros(); // Submenu com outras funcionalidades.
                    case 6 -> System.out.println("Saindo... Obrigado por usar o sistema!"); // Encerra o programa.
                    default -> System.out.println("Op√ß√£o inv√°lida! Escolha uma op√ß√£o v√°lida."); // Mensagem de erro para entrada inv√°lida.
                }
            } while (opcao != 6); // Loop continua at√© que o usu√°rio escolha a op√ß√£o de sair.
        }
    }

    // M√©todo que exibe o menu principal do sistema.
    private static void exibirMenu() {
        System.out.println("\n=== PETSHOP ===");
        System.out.println("1. Cadastrar Pet");
        System.out.println("2. Listar Pets");
        System.out.println("3. Novo Agendamento");
        System.out.println("4. Ver Hist√≥rico de Agendamentos");
        System.out.println("5. Outros (Financeiro e Produtos)");
        System.out.println("6. Sair");
        System.out.print("Op√ß√£o: "); // Solicita entrada do usu√°rio.
    }

    // M√©todo que exibe um submenu com funcionalidades adicionais.
    private static void exibirOutros() {
        int opcao;
        do {
            System.out.println("\n=== OUTROS ===");
            System.out.println("1. Exibir Resumo Financeiro");
            System.out.println("2. Gerenciar Produtos");
            System.out.println("3. Remover Pet ou Cliente");
            System.out.println("4. Voltar ao Menu Principal");
            System.out.print("Op√ß√£o: ");

            opcao = lerOpcao(); // Captura a op√ß√£o do usu√°rio.

            // Estrutura de decis√£o baseada na escolha do usu√°rio.
            switch (opcao) {
                case 1 -> exibirResumoFinanceiro(); // Exibe informa√ß√µes financeiras.
                case 2 -> gerenciarProdutos(); // Gerencia produtos cadastrados.
                case 3 -> menuRemover(); // Remove pets ou clientes do sistema.
                case 4 -> System.out.println("Voltando ao Menu Principal..."); // Retorna ao menu principal.
                default -> System.out.println("Op√ß√£o inv√°lida! Escolha uma op√ß√£o v√°lida."); // Mensagem de erro para entrada inv√°lida.
            }
        } while (opcao != 4); // O loop continua at√© o usu√°rio optar por sair.
    }

    // M√©todo que exibe um resumo financeiro do pet shop.
    private static void exibirResumoFinanceiro() {
        System.out.println(financeiro.exibirResumoFinanceiro());
    }

    // M√©todo para gerenciar produtos cadastrados no sistema.
    private static void gerenciarProdutos() {
        System.out.println("\n=== GERENCIAR PRODUTOS ===");

        // Verifica se h√° produtos cadastrados antes de listar.
        if (PRODUTOS.isEmpty()) {
            System.out.println("üö´ Nenhum produto cadastrado!");
        } else {
            System.out.println("Produtos cadastrados:");
            PRODUTOS.forEach(produto -> System.out.println(produto)); // Exibe lista de produtos.
        }

        // Pergunta ao usu√°rio se deseja cadastrar um novo produto.
        System.out.print("Deseja adicionar um novo produto? (S/N): ");
        String resposta = SC.nextLine().trim();

        // Se o usu√°rio confirmar, chama o m√©todo de cadastro.
        if (resposta.equalsIgnoreCase("S")) {
            cadastrarProduto();
        }
    }

    // M√©todo para cadastrar um novo pet e seu dono.
    private static void cadastrarPet() {
        try {
            System.out.print("\nNome do cliente: ");
            String nomeCliente = SC.nextLine().trim();

            System.out.print("CPF do cliente: ");
            String cpfCliente = SC.nextLine().trim();

            System.out.print("Telefone do cliente: ");
            String telefoneCliente = SC.nextLine().trim();

            System.out.print("Endere√ßo do cliente: ");
            String enderecoCliente = SC.nextLine().trim();

            // Verifica se o cliente j√° est√° cadastrado pelo CPF.
            Cliente cliente = CLIENTES.stream()
                .filter(c -> c.getCpf().equalsIgnoreCase(cpfCliente))
                .findFirst()
                .orElse(null);

            // Se o cliente n√£o existir, cria um novo.
            if (cliente == null) {
                cliente = new Cliente(nomeCliente, cpfCliente, telefoneCliente, enderecoCliente);
                CLIENTES.add(cliente);
                System.out.println("‚úÖ Cliente cadastrado com sucesso!");
            } else {
                System.out.println("Cliente j√° cadastrado. Usando cliente existente.");
            }

            // Cadastro de informa√ß√µes do pet.
            System.out.print("Nome do pet: ");
            String nomePet = SC.nextLine().trim();

            System.out.print("Esp√©cie (Cachorro/Gato): ");
            String especie = SC.nextLine().trim();

            // Valida√ß√£o da esp√©cie para evitar entradas inv√°lidas.
            while (!especie.equalsIgnoreCase("Cachorro") && !especie.equalsIgnoreCase("Gato")) {
                System.out.println("Esp√©cie inv√°lida! Apenas Cachorro ou Gato s√£o permitidos.");
                System.out.print("Esp√©cie (Cachorro/Gato): ");
                especie = SC.nextLine().trim();
            }

            // Leitura do peso do pet e da data de nascimento com valida√ß√£o.
            float peso = lerFloat("Peso (kg): ", 0.1f, 100f);
            LocalDate nascimento = lerData("Data de nascimento (dd/MM/yyyy): ");

            // Cria√ß√£o e associa√ß√£o do pet ao cliente.
            Pets pet = new Pets(nomePet, especie, peso, nascimento);
            cliente.adicionarPet(pet);
            System.out.println("‚úÖ Pet cadastrado com sucesso!");
        } catch (Exception e) {
            System.out.println("Erro ao cadastrar pet: " + e.getMessage());
        }
    }

   // M√©todo que exibe a lista de pets cadastrados no sistema.
    private static void listarPets() { 
        // Verifica se a lista de clientes est√° vazia, indicando que n√£o h√° pets cadastrados.
        if (CLIENTES.isEmpty()) { 
            System.out.println("\nüö´ Nenhum cliente e pet cadastrado!");
            return; // Retorna imediatamente para evitar processamento desnecess√°rio.
        }

        System.out.println("\nüìã Lista de Pets Cadastrados e seus Donos:");

        // Itera sobre todos os clientes cadastrados.
        for (Cliente cliente : CLIENTES) { 
            // Exibe as informa√ß√µes do cliente utilizando seu m√©todo `toString()`.
            System.out.println("\n" + cliente.toString());

            // Chama o m√©todo `listarPets()` do objeto Cliente, que provavelmente retorna informa√ß√µes sobre os pets do cliente.
            System.out.println(cliente.listarPets());
        }
    }

    // M√©todo respons√°vel por realizar um novo agendamento de servi√ßo para um pet.
    private static void realizarAgendamento() { 
        // Se n√£o houver clientes cadastrados, impede o agendamento e exibe uma mensagem ao usu√°rio.
        if (CLIENTES.isEmpty()) { 
            System.out.println("üö´ Nenhum cliente e pet cadastrado! Cadastre antes de agendar.");
            return;
        }

        try { 
            // Obt√©m a data e hora do servi√ßo, utilizando m√©todos auxiliares para garantir formatos corretos.
            LocalDate data = lerData("Data do servi√ßo (dd/MM/yyyy): ");
            LocalTime hora = lerHora();

            // Verifica se o hor√°rio do agendamento est√° dentro do funcionamento do pet shop.
            if (!isHorarioValido(data, hora)) { 
                System.out.println("üö´ Hor√°rio de agendamento inv√°lido. O pet shop est√° fechado nesse hor√°rio.");
                return;
            }

            // Exibe a lista de pets cadastrados para facilitar a escolha do usu√°rio.
            listarPets();

            // Seleciona o pet para o qual ser√° feito o agendamento.
            Pets pet = selecionarPet();

            // Captura o servi√ßo escolhido pelo usu√°rio.
            String servico = lerServico();

            // Calcula o pre√ßo automaticamente com base no servi√ßo e no porte do pet.
            double valor = Servico.calcularPrecoAutomatico(servico, pet.getPortePet());

            // Cria um novo objeto `Agendamento` e adiciona √† lista de agendamentos.
            AGENDAMENTOS.add(new Agendamento(pet, data, hora, servico, valor));

            // Atualiza os registros financeiros do pet shop ap√≥s o agendamento ser conclu√≠do.
            financeiro.setServicoFeitos(financeiro.getServicoFeitos() + 1);
            financeiro.setRecebimento(financeiro.getRecebimento() + valor);

            // Exibe uma mensagem de sucesso com o valor do servi√ßo.
            System.out.printf("‚úÖ Agendamento realizado com sucesso! Valor: R$ %.2f%n", valor);
        } catch (Exception e) { 
            // Captura poss√≠veis erros e exibe uma mensagem informativa ao usu√°rio.
            System.out.println("Erro ao realizar agendamento: " + e.getMessage());
        }
    }

    // M√©todo que verifica se um hor√°rio de agendamento √© v√°lido conforme o hor√°rio de funcionamento do pet shop.
    private static boolean isHorarioValido(LocalDate data, LocalTime hora) { 
        // Obt√©m o dia da semana correspondente √† data informada.
        DayOfWeek diaDaSemana = data.getDayOfWeek();

        // O pet shop est√° fechado aos domingos, ent√£o retorna `false` imediatamente.
        if (diaDaSemana == DayOfWeek.SUNDAY) { 
            return false;
        } else if (diaDaSemana == DayOfWeek.SATURDAY) { 
            // Aos s√°bados, o funcionamento √© das 09:00 √†s 13:00.
            return hora.isAfter(LocalTime.of(8, 59)) && hora.isBefore(LocalTime.of(13, 1));
        } else { // De segunda a sexta-feira
            // Hor√°rio v√°lido: das 08:00 √†s 18:00.
            return hora.isAfter(LocalTime.of(7, 59)) && hora.isBefore(LocalTime.of(18, 1));
        }
    }

   // M√©todo que permite ao usu√°rio escolher um servi√ßo v√°lido a partir da lista de op√ß√µes dispon√≠veis.
    private static String lerServico() { 
        System.out.println("\nüìå Servi√ßos dispon√≠veis:");

        // Itera sobre a lista de servi√ßos v√°lidos e exibe cada um com seu n√∫mero correspondente.
        for (int i = 0; i < SERVI√áOS_VALIDOS.size(); i++) { 
            System.out.printf("%d. %s%n", i + 1, SERVI√áOS_VALIDOS.get(i)); // Exibe os servi√ßos numerados a partir de 1.
        }

        while (true) { 
            System.out.print("Escolha o n√∫mero do servi√ßo desejado: ");
            String input = SC.nextLine().trim(); // Captura e remove espa√ßos extras da entrada do usu√°rio.

            try { 
                int escolha = Integer.parseInt(input); // Converte a entrada para um n√∫mero inteiro.

                // Verifica se a escolha est√° dentro do intervalo v√°lido.
                if (escolha >= 1 && escolha <= SERVI√áOS_VALIDOS.size()) { 
                    return SERVI√áOS_VALIDOS.get(escolha - 1); // Retorna o servi√ßo correspondente √† escolha do usu√°rio.
                } else { 
                    System.out.println("üö´ N√∫mero inv√°lido! Escolha um n√∫mero entre 1 e " + SERVI√áOS_VALIDOS.size() + ".");
                }
            } catch (NumberFormatException e) { 
                System.out.println("üö´ Entrada inv√°lida! Digite um n√∫mero."); // Trata o erro caso a entrada n√£o seja um n√∫mero v√°lido.
            }
        }
    }

    // M√©todo que permite ao usu√°rio selecionar um pet a partir dos pets cadastrados no sistema.
    private static Pets selecionarPet() { 
        System.out.print("Digite o nome do pet: ");
        String nomePet = SC.nextLine().trim(); // Captura a entrada e remove espa√ßos extras.

        // Percorre todos os clientes cadastrados.
        for (Cliente cliente : CLIENTES) { 
            // Percorre os pets associados ao cliente atual.
            for (Pets pet : cliente.getPets()) { 
                // Compara o nome do pet ignorando mai√∫sculas e min√∫sculas.
                if (pet.getNomePet().equalsIgnoreCase(nomePet)) { 
                    return pet; // Retorna o pet encontrado.
                }
            }
        }

        // Caso nenhum pet seja encontrado, uma exce√ß√£o √© lan√ßada para indicar erro.
        throw new NoSuchElementException("üö´ Pet n√£o encontrado!"); 
    }

    // M√©todo que solicita e valida uma data digitada pelo usu√°rio.
    private static LocalDate lerData(String mensagem) { 
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy"); // Define o formato esperado para a data.
        LocalDate data = null; 

        while (data == null) { 
            System.out.print(mensagem);
            String dataStr = SC.nextLine().trim(); // Captura a entrada e remove espa√ßos extras.

            try { 
                data = LocalDate.parse(dataStr, formatter); // Converte a entrada para um objeto `LocalDate`.
            } catch (DateTimeParseException e) { 
                System.out.println("üö´ Data inv√°lida! Use o formato dd/MM/yyyy."); // Trata erro caso a entrada n√£o corresponda ao formato esperado.
            }
        }

        return data; // Retorna a data v√°lida.
    }

    // M√©todo que solicita e valida um hor√°rio digitado pelo usu√°rio.
    private static LocalTime lerHora() { 
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm"); // Define o formato esperado para a hora.

        while (true) { 
            try { 
                System.out.print("Hora do servi√ßo (HH:mm): ");
                String horaStr = SC.nextLine().trim(); // Captura a entrada e remove espa√ßos extras.

                LocalTime hora = LocalTime.parse(horaStr, formatter); // Converte a entrada para um objeto `LocalTime`.
                return hora; // Retorna o hor√°rio v√°lido.
            } catch (DateTimeParseException e) { 
                System.out.println("üö´ Hora inv√°lida! Use o formato HH:mm."); // Exibe erro caso a entrada n√£o seja v√°lida.
            }
        }
    }

    // M√©todo que solicita e valida um n√∫mero decimal dentro de um intervalo definido.
    private static float lerFloat(String mensagem, float min, float max) { 
        while (true) { 
            try { 
                System.out.print(mensagem);
                float valor = Float.parseFloat(SC.nextLine().trim()); // Converte a entrada para um `float`.

                // Verifica se o n√∫mero est√° dentro do intervalo permitido.
                if (valor >= min && valor <= max) return valor; 

                System.out.println("üö´ Valor fora do intervalo permitido! Tente novamente.");
            } catch (NumberFormatException e) { 
                System.out.println("üö´ Entrada inv√°lida! Digite um n√∫mero v√°lido."); // Exibe erro caso a entrada n√£o seja um n√∫mero v√°lido.
            }
        }
    }

   // M√©todo para cadastrar um novo produto no sistema.
    private static void cadastrarProduto() {
        try {
            System.out.print("\nNome do produto: ");
            String nome = SC.nextLine().trim(); // Captura o nome do produto, removendo espa√ßos extras.

            System.out.print("Categoria (Higiene/Alimenta√ß√£o/Brinquedos): ");
            String categoria = SC.nextLine().trim(); // Captura a categoria do produto.

            // Obt√©m o pre√ßo do produto dentro do intervalo permitido (0.1 a 10.000).
            float preco = lerFloat("Pre√ßo (R$): ", 0.1f, 10000f);

            int estoque;
            while (true) {
                try {
                    System.out.print("Quantidade dispon√≠vel no estoque: ");
                    estoque = Integer.parseInt(SC.nextLine().trim()); // Converte entrada para inteiro.

                    if (estoque >= 0) break; // Garante que o estoque n√£o seja negativo.
                    System.out.println("üö´ Quantidade inv√°lida! Digite um n√∫mero n√£o negativo.");
                } catch (NumberFormatException e) {
                    System.out.println("üö´ Entrada inv√°lida! Digite um n√∫mero inteiro.");
                }
            }

            int codigoProduto;
            while (true) {
                try {
                    System.out.print("C√≥digo √∫nico do produto: ");
                    codigoProduto = Integer.parseInt(SC.nextLine().trim()); // Converte entrada para inteiro.

                    if (codigoProduto > 0) break; // Garante que o c√≥digo do produto seja positivo.
                    System.out.println("üö´ C√≥digo inv√°lido! Deve ser um n√∫mero positivo.");
                } catch (NumberFormatException e) {
                    System.out.println("üö´ Entrada inv√°lida! Digite um n√∫mero inteiro.");
                }
            }

            // Cria√ß√£o e adi√ß√£o do novo produto √† lista de produtos.
            Produto novoProduto = new Produto(nome, preco, estoque, categoria, codigoProduto);
            PRODUTOS.add(novoProduto);
            System.out.println("‚úÖ Produto cadastrado com sucesso!");
        } catch (Exception e) {
            System.out.println("Erro ao cadastrar produto: " + e.getMessage());
        }
    }

    // M√©todo para capturar e validar a op√ß√£o num√©rica digitada pelo usu√°rio.
    private static int lerOpcao() {
        while (true) {
            try {
                System.out.print("Escolha uma op√ß√£o: ");
                int opcao = Integer.parseInt(SC.nextLine().trim());

                if (opcao > 0) return opcao; // Retorna apenas n√∫meros positivos.
                System.out.println("üö´ Op√ß√£o inv√°lida! Digite um n√∫mero positivo.");
            } catch (NumberFormatException e) {
                System.out.println("üö´ Entrada inv√°lida! Digite um n√∫mero.");
            }
        }
    }

    // M√©todo que exibe o menu de remo√ß√£o e permite ao usu√°rio escolher uma a√ß√£o.
    private static void menuRemover() {
        int opcao;
        do {
            System.out.println("\n=== REMOVER ===");
            System.out.println("1. Remover Pet");
            System.out.println("2. Remover Cliente");
            System.out.println("3. Voltar");
            System.out.print("Op√ß√£o: ");

            opcao = lerOpcao(); // Obt√©m a op√ß√£o do usu√°rio.

            switch (opcao) {
                case 1 -> removerPet();
                case 2 -> removerCliente();
                case 3 -> System.out.println("Voltando...");
                default -> System.out.println("Op√ß√£o inv√°lida! Escolha uma op√ß√£o v√°lida.");
            }
        } while (opcao != 3); // Continua at√© que o usu√°rio escolha "Voltar".
    }

    // M√©todo que permite ao usu√°rio remover um pet cadastrado.
    private static void removerPet() {
        if (CLIENTES.isEmpty()) {
            System.out.println("üö´ Nenhum pet cadastrado para remover.");
            return;
        }

        listarPets(); // Exibe a lista de pets cadastrados.

        System.out.print("Digite o nome do pet para remover: ");
        String nomePet = SC.nextLine().trim(); // Captura o nome do pet a ser removido.

        Cliente clientePet = null;
        Pets petRemover = null;

        // Percorre os clientes e seus pets para encontrar o pet desejado.
        for (Cliente cliente : CLIENTES) {
            for (Pets pet : cliente.getPets()) {
                if (pet.getNomePet().equalsIgnoreCase(nomePet)) {
                    clientePet = cliente;
                    petRemover = pet;
                    break;
                }
            }
            if (petRemover != null) break;
        }

        // Se o pet n√£o for encontrado, exibe uma mensagem de erro.
        if (petRemover == null) {
            System.out.println("üö´ Pet n√£o encontrado.");
            return;
        }

        System.out.printf("Tem certeza que deseja remover %s? (S/N): ", petRemover.getNomePet());
        String confirmar = SC.nextLine().trim();

        if (confirmar.equalsIgnoreCase("S")) {
            // Remove o pet da lista de pets do cliente.
            List<Pets> petsModificaveis = new ArrayList<>(clientePet.getPets());
            if (petsModificaveis.remove(petRemover)) {
                clientePet.getPets().clear();
                clientePet.getPets().addAll(petsModificaveis);
                System.out.println("‚úÖ Pet removido com sucesso!");

                // Se o cliente n√£o tiver mais pets, pergunta se deseja remov√™-lo tamb√©m.
                if (clientePet.getPets().isEmpty()) {
                    System.out.printf("Cliente %s n√£o possui mais pets. Deseja remov√™-lo? (S/N): ", clientePet.getNome());
                    String confirmaCliente = SC.nextLine().trim();
                    if (confirmaCliente.equalsIgnoreCase("S")) {
                        CLIENTES.remove(clientePet);
                        System.out.println("‚úÖ Cliente removido com sucesso!");
                    }
                }
            } else {
                System.out.println("üö´ Erro ao remover pet.");
            }
        } else {
            System.out.println("‚ùå Remo√ß√£o cancelada.");
        }
    }

    // M√©todo para remover um cliente e todos os seus pets cadastrados.
    private static void removerCliente() {
        if (CLIENTES.isEmpty()) {
            System.out.println("üö´ Nenhum cliente cadastrado para remover.");
            return;
        }

        listarClientes(); // Exibe a lista de clientes cadastrados.

        System.out.print("Digite o CPF do cliente para remover: ");
        String cpf = SC.nextLine().trim(); // Captura o CPF do cliente.

        Cliente clienteRemover = null;

        // Busca o cliente pelo CPF informado.
        for (Cliente cliente : CLIENTES) {
            if (cliente.getCpf().equalsIgnoreCase(cpf)) {
                clienteRemover = cliente;
                break;
            }
        }

        // Se o cliente n√£o for encontrado, exibe mensagem de erro.
        if (clienteRemover == null) {
            System.out.println("üö´ Cliente n√£o encontrado.");
            return;
        }

        System.out.printf("Tem certeza que deseja remover o cliente %s e todos os seus pets? (S/N): ", clienteRemover.getNome());
        String confirmar = SC.nextLine().trim();

        if (confirmar.equalsIgnoreCase("S")) {
            // Remove o cliente do sistema.
            CLIENTES.remove(clienteRemover);
            System.out.println("‚úÖ Cliente removido com sucesso!");
        } else {
            System.out.println("‚ùå Remo√ß√£o cancelada.");
        }
    }

   // M√©todo que lista todos os clientes cadastrados no sistema.
    private static void listarClientes() { 
        // Verifica se a lista de clientes est√° vazia. Caso esteja, exibe uma mensagem e retorna.
        if (CLIENTES.isEmpty()) { 
            System.out.println("üö´ Nenhum cliente cadastrado.");
            return; // Retorna imediatamente para evitar execu√ß√£o desnecess√°ria.
        }

        System.out.println("\nüìã Lista de Clientes:");

        // Utiliza `forEach` para percorrer e imprimir cada cliente da lista.
        CLIENTES.forEach(System.out::println); 
    }

    // M√©todo que exibe o hist√≥rico de agendamentos feitos no pet shop.
    private static void exibirHistoricoAgendamentos() { 
        // Verifica se h√° agendamentos registrados. Caso n√£o haja, exibe uma mensagem e retorna.
        if (AGENDAMENTOS.isEmpty()) { 
            System.out.println("üö´ Nenhum agendamento realizado ainda.");
            return;
        }

        System.out.println("\nüìÖ Hist√≥rico de Agendamentos:");

        // Utiliza `forEach` para percorrer a lista de agendamentos e exibir os detalhes de cada um.
        AGENDAMENTOS.forEach(agendamento -> System.out.println(agendamento.getDetalhesAgendamento())); 
    }
}
5
